package examplesFromLectures.strings;

public class StringsMain {
    public static void main(String [] args){
        System.out.println("StringsMain.main");

        StringRun stringRun = new StringRun();
        stringRun.run(); // вказали, щоб запускався метод із класу StringRun

        //strings(); // вказали метод цього класу, щоб він запускався
    }
    public static void strings(){
        //_________________________________________________



        //Розглядаємо, по якому принципу працює пам'ять на прикладі (Stack, HEAP, Static, Pool String)
        //Чем отличаются две следующее записи?

        //StringRun stringRun = new StringRun(); // и создаю обьект и присваиваю stringRun переменной ссылку на него
        //int a = 10;

        User user1 = new User();
        user1.setName("test1"); //юзеру ініціалізуємо ім'я
        System.out.println("user name = " + user1.getName()); // хочемо роздрукувати ім'я користувача

        User user2 = user1; // це означає, що юзер2 посилається на юзер1
        user2.setName("test2"); // всі маніпуляції зараз проводимо із юзером 2 і що відбувається...

        System.out.println("user name = " + user1.getName());
        // Результат: т.я. ми посилаємось на адресний простір, де лежить значення user2, для user1 значення теж
        // буде змінюватись, тому що ми виконуємо операції в одному адресному просторі.
        // В стекі лежить посилання, яке вказує на адр. простір в HEAP, в HEAP лежить саме заначення.

        // Для строк придумали спеціальну обл. пам'яті, т.я. їх часто використовують.
        // При цьому змінна name (лежить в User) зберігається в Pool String.
        // Тобто: у нас user1 (лежить в стекі (саме посилання), який посилається на об'єкт-юзер,який живе в кучі,
        // а сам test1(змінна цього об'єкту) живе в pool string(теж область пам'яті)

        //____________________________________________________________
    }
}
